load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_test")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_webpack//webpack:defs.bzl", "webpack_bundle", "webpack_devserver")
load("@gzgz_rules_sass//sass:defs.bzl", "sass_binary")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages(name = "node_modules")

package(default_visibility = ["//:__subpackages__"])

ts_project(
    name = "tsc",
    srcs = glob([
        "src/**/*.ts",
        "src/**/*.tsx",
        # ], exclude = ["src/**/*.spec.ts"]),
    ]),
    allow_js = True,
    declaration = True,
    declaration_map = True,
    incremental = True,
    out_dir = "dist",
    resolve_json_module = True,
    root_dir = "src",
    source_map = True,
    tsconfig = "tsconfig.json",
    deps = [
        ":node_modules/@types/react",
        ":node_modules/@types/react-dom",
        ":node_modules/react",
        ":node_modules/react-dom",

        # @TODO: move tests deps into :tsc_tests rule
        ":node_modules/@types/mocha",
        ":node_modules/@types/chai",
        ":node_modules/mocha",
        ":node_modules/chai",
    ],
)

# # React-js need document DOM API context to be executing which is available
# # when running the js app in a browser, so js_binary can NOT be used now since
# # it executes js app in NodeJS that doesn't have it.
# js_binary(
#     name="tsc_app",
#     data=[
#         ":tsc",
#         "package.json",
#     ],
#     chdir= package_name(),
#     entry_point = "dist/index.js",
# )

webpack_bundle(
    name = "webpack_build",
    srcs = [":tsc"],
    chdir = package_name(),
    entry_point = "dist/index.js",
    node_modules = ":node_modules",
    output_dir = False,
    tags = ["webpack"],
    webpack_config = "webpack.config.cjs",
    deps = [
        ":node_modules/webpack",
    ],
)

# # React-js need document DOM API context to be executing which is available
# # when running the js app in a browser, so js_binary can NOT be used now since
# # it executes js app in NodeJS that doesn't have it.
# js_binary(
#     name="webpack_app",
#     data=[
#         ":webpack_build",
#     ],
#     chdir= package_name(),
#     entry_point = "webpack_build.js",
# )

# Rule works!
# @TODO: find a better way!
# Note: We need to figure out first how to inject css into React app:
# Dynamically (inject during bundling) or statically (by linking statically generated file)
sass_binary(
    name = "styles",
    src = "src/styles.scss",
    output_dir = "dist",
    output_name = "styles.css",
)

# Rule works!
# @TODO: find a better way!
copy_file(
    name = "index_html",
    src = "src/index.html",
    out = "dist/index.html",
)

# !DISABLED to fix bazel build
#
# # @TODO: find a way to fix the `entry_points` to reuse compiled `webpack_build.js` but not
# # the local one. TL,DR: To run this command `$ bazel run :serve` you need to build locally
# # this project `$ pnpm run build` to be able to get access to "dist/webpack_build.js" file. :(
# webpack_devserver(
#     name = "serve",
#     chdir = package_name(),
#     data = [
#         ":index_html",
#         ":styles",
#         ":tsc",
#         ":webpack_build",
#     ],
#     entry_points = {
#         "dist/webpack_build.js": ":webpack_build",
#     },
#     node_modules = "//experimental/service_test_ts_webpack_react_tests:node_modules",
#     webpack_config = "webpack.config.cjs",
# )

# Tests infrastructure
# Note! Please make sure to add exclude = ["src/**/*.spec.ts"] to :tsc target
# @TODO find a way to split tests from the source code (`:tsc` and `:tsc_tests`)
# ts_project(
#     name = "tsc_tests",
#     testonly = True,
#     srcs = glob([
#         "src/**/*.spec.ts",
#     ]),
#     allow_js = True,
#     declaration = True,
#     declaration_map = True,
#     incremental = True,
#     out_dir = "dist",
#     resolve_json_module = True,
#     root_dir = "src",
#     source_map = True,
#     tsconfig = "tsconfig.json",
#     deps = [
#         ":node_modules/@types/mocha",
#         ":node_modules/@types/chai",
#         ":node_modules/mocha",
#         ":node_modules/chai",
#         ":tsc",
#     ],
# )

copy_to_bin(
    name = "package_json",
    srcs = ["package.json"],
)

js_test(
    name = "test",
    size = "small",
    timeout = "short",
    args = ["--no-build"],
    data = [
        # ":tsc_tests",
        ":tsc",
        ":package_json",
        ".mocharc.json",
        "//tools/test-mocha:mocha_test_lib",
    ],
    entry_point = "//tools/test-mocha:mocha_test_lib",
    env = {},
    log_level = "error",
    tags = ["mocha-test"],
)
