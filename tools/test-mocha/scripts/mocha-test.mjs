#!/usr/bin/env node

// This script simply runs `$ node node_modules/mocha/bin/mocha.js ... params ...`
// mocha script for test files `**/*.spec.js` for the package that called this script from.
// Note-1: test files must be generated by `tsc_tests` bazel rule since execution happens
// during Bazel test phase in runtime.

import 'mocha';
import 'dotenv';
import 'source-map-support';
import { spawn } from 'child_process';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';
import { exit } from 'process';

const DEFAULT_EXIT_CODE = -1;
const DEFAULT_TIMEOUT = 50000;
const DEFAULT_FILES = './dist/**/*.spec.js';

const __dirname = dirname(fileURLToPath(import.meta.url));
const _mocha_bin = `node ${__dirname}/../node_modules/mocha/bin/mocha.js`;
const _package_dir = path.join(process.argv[0], '../../');

async function runCommand(commandStr, env) {
  return new Promise((resolve, reject) => {
    const [cmd, ...args] = commandStr.split(/\s+/);
    const child = spawn(cmd, args, { env });

    // Print in real-time
    child.stdout.on('data', (data) => process.stdout.write(data));
    child.stderr.on('data', (data) => process.stderr.write(data));

    child.on('close', (code) => resolve(code));
    child.on('error', (err) => reject(err));
  });
}

async function runMochaTests() {
  let exitCode = DEFAULT_EXIT_CODE;
  const params = `
        --require ${__dirname}/../node_modules/dotenv/config \
        --require ${__dirname}/../node_modules/source-map-support/register \
        --grep "." \
        --timeout "${DEFAULT_TIMEOUT}" \
        --exit \
        --no-warnings \
        --fail-zero \
        "${_package_dir}/${DEFAULT_FILES}" \
    `;
  try {
    const commandStr = `${_mocha_bin} ${params}`;
    exitCode = await runCommand(commandStr, process.env);
  } catch (e) {
    console.error(`Tests failed! \n\n\n`, e);
  }
  return exitCode;
}

(async function () {
  if (process.env.NODE_ENV !== 'test') {
    let exitCode = await runMochaTests();
    exit(exitCode);
  }
})();
